#include<stdio.h>
#include<malloc.h>
struct node {
    int n;
    int degree;
    struct node* parent;
    struct node* child;
    struct node* sibling;
};
struct node* MAKE_bin_HEAP();
void bin_LINK(struct node*, struct node*);
struct node* CREATE_NODE(int);
struct node* bin_HEAP_UNION(struct node*, struct node*);
struct node* bin_HEAP_INSERT(struct node*, struct node*);
struct node* bin_HEAP_MERGE(struct node*, struct node*);
void DISPLAY(struct node*);

 

struct node* BINOMIAL_HEAP_MINIMUM(struct node*);
int count = 1;

struct node* MAKE_bin_HEAP() {
    struct node* np;
    np = NULL;
    return np;
}
struct node * H = NULL;
struct node *Hr = NULL;
void bin_LINK(struct node* y, struct node* z) {
    y->parent = z;
    y->sibling = z->child;
    z->child = y;
    z->degree = z->degree + 1;
}
struct node* CREATE_NODE(int k) {
    struct node* p;
    p = (struct node*) malloc(sizeof(struct node));
    p->n = k;
    return p;
}
struct node* bin_HEAP_UNION(struct node* H1, struct node* H2)
{
    struct node* H = MAKE_bin_HEAP();
    H = bin_HEAP_MERGE(H1, H2);
    struct node* prev_x;
    struct node* next_x;
    struct node* x;
    if (H == NULL)
        return H;
    prev_x = NULL;
    x = H;
    next_x = x->sibling;
    while (next_x != NULL)
    {
        if ((x->degree != next_x->degree) || ((next_x->sibling != NULL)
                && (next_x->sibling)->degree == x->degree))
        {
            prev_x = x;
            x = next_x;
        }
        else
        {
            if (x->n <= next_x->n)
            {
                x->sibling = next_x->sibling;
                bin_LINK(next_x, x);
            }
            else
            {
                if (prev_x == NULL)
                    H = next_x;
                else
                    prev_x->sibling = next_x;
                bin_LINK(x, next_x);
                x = next_x;
            }
        }
        next_x = x->sibling;
    }
    return H;
}
struct node* bin_HEAP_INSERT(struct node* H, struct node* x) {
    struct node* H1 = MAKE_bin_HEAP();
    x->parent = NULL;
    x->child = NULL;
    x->sibling = NULL;
    x->degree = 0;
    H1 = x;
    H = bin_HEAP_UNION(H, H1);
    return H;
}

 

struct node* bin_HEAP_MERGE(struct node* H1, struct node* H2)
{
    struct node* H = MAKE_bin_HEAP();
    struct node* y;
    struct node* z;
    struct node* a;
    struct node* b;
    y = H1;
    z = H2;
    if (y != NULL)
    {
        if (z != NULL && y->degree <= z->degree)
            H = y;
        else if (z != NULL && y->degree > z->degree)
            H = z;
        else
            H = y;
    }
    else
        H = z;
    while (y != NULL && z != NULL)
    {
        if (y->degree < z->degree)
        {
            y = y->sibling;
        }
        else if (y->degree == z->degree)
        {
            a = y->sibling;
            y->sibling = z;
            y = a;
        }
        else
        {
            b = z->sibling;
            z->sibling = y;
            z = b;
        }
    }
    return H;
}
void DISPLAY(struct node* H)
{
    struct node* p;
    if (H == NULL)
    {
        printf("\nHeap Empty");
        return;
    }
    printf("\nThe root nodes are:-\n");
    p = H;
    while (p != NULL)
    {
        printf("%d ", p->n,p->degree);
        if (p->sibling != NULL)
                printf("---");
        p = p->sibling;
    }
    printf("\n");
}

 

struct node* BINOMIAL_HEAP_MINIMUM(struct node* H)
{
    struct node* y = NULL;
    struct node* x = H;
    int min = 9999;
    while( x!=NULL)
    {
        if(x->n < min)
        {
            min = x->n;
            y = x;
        }
        x = x->sibling;

 

    }
    return y;
}
int main() {
    int i, n, m, l;
    struct node* p;
    struct node* np;
    struct node *minimumNode;
    char ch;
    int Icount,nodeC =0;;
    printf("\n\nENTER THE NUMBER OF ELEMENTS:");
    scanf("%d", &n);
   nodeC= Icount=n;
    printf("\nENTER THE ELEMENTS:\n");
    for (i = 1; i <= n; i++)
    {
        scanf("%d", &m);
        np = CREATE_NODE(m);
        H = bin_HEAP_INSERT(H, np);
    }

 

    do
    {

 

        printf("\n1)INSERT AN ELEMENT 2) DISPLAY ROOT NODES 3)FIND MINIMUM KEY 4)EXIT\n \n");
        scanf("%d", &l);
        switch (l)
        {
            case 1:
                do
                {
                    printf("\nENTER THE ELEMENT TO BE INSERTED:");
                    scanf("%d", &m);
                    p = CREATE_NODE(m);
                    H = bin_HEAP_INSERT(H, p);
                    Icount++;
                      nodeC= Icount;
                    printf("\nNOW THE HEAP IS:\n");
                    DISPLAY(H);
                    printf("\nINSERT MORE(y/Y)= \n");
                    fflush(stdin);
                    scanf("%c", &ch);
                } while (ch == 'Y' || ch == 'y');
                break;

 

            case 2:
                printf("\nThe binomial heap containing root list is:\n");
                DISPLAY(H);
                break;

 


            case 3:
                minimumNode = BINOMIAL_HEAP_MINIMUM(H);
                printf(" \n\n%d is minimum",minimumNode->n);
                 printf("\n\nTHE TOTAL NUMBER OF NODE(n) IS %d", nodeC);
                           printf("\n\nAMORTISED COST OF FINDING MINIMUM KEY IS = O(logn) = %lf\n", log(nodeC));
                break;
            case 4:
                printf("exit\n");
        }
    } while (l != 4);
    printf(" \n\nWorst case cost of n insertion operation is O(nlogn) \n\nAmortized cost of n Insertion operation is O(nlogn)/n = O(logn) \n");
    printf("Total insertion : %d \n\n",Icount);
    printf("Cost of %d Insertion operation is O(nlogn) = %lf \n \nAmortized cost of %d Insertion operation is O(nlogn)/n = O(logn) = %lf\n",Icount,(Icount* log(Icount)),Icount, log(Icount));
    return 0;
}
 
